IMPORT * FROM ML;
IMPORT STD;
IMPORT * FROM $;
IMPORT PBblas;
IMPORT STD;
Layout_Cell := PBblas.Types.Layout_Cell;
Layout_part := PBblas.Types.Layout_part;
//matlab code stlExercise_softmax_LExisNexis_toy_sparse.m

indepDataC := DATASET ([

{ 1,1 , 32},
{ 1,2 , 43},
{ 2, 1,4 },
{ 2,2 ,3 },
{ 3,1 , 43},
{4 ,1 ,2 },
{ 5, 1,765 },
{ 6, 1, 78},
{ 7, 1, 5},
{8 , 2,43 },
{ 9,2 , 32},
{ 10,2 , 112},
{ 11,1 , 32},
{ 11,2 , 43},
{ 12, 1,4 },
{ 12,2 ,3 },
{ 13,1 , 43},
{14 ,1 ,2 },
{ 15, 1,765 },
{ 16, 1, 78},
{ 17, 1, 5},
{18 , 2,43 },
{ 19,2 , 32},
{ 20,2 , 112},

{ 21, 3, 23},
{ 21, 4,3 },
{ 22,3 , 4},
{ 23,4 ,54 },
{ 24,4 ,54 },
{ 25,1 , 34},
{ 26,1 , 45},
{ 27,2 , 45},
{28 ,1 , 23},
{ 29, 1, 78},
{ 30,2 , 6},
{ 31, 3,5 },
{ 31, 4, 4},
{ 32,3 ,23 },
{ 33,4 , 43},
{ 34,4 , 43},
{ 35,1 , 43},
{ 36,1 ,23 },
{ 37,2 ,32 },
{38 ,1 ,7 },
{ 39, 1,7 },
{ 40,2 , 6},
{ 41, 3,5 },
{41, 4,4 },
{ 42,3 , 3},
{ 43,4 , 2},
{ 44,4 , 1},
{ 45,1 , 25},
{ 46,1 , 45},
{ 47,2 , 768},
{48 ,1 , 45},
{ 49, 1, 43},
{ 50,2 , 414},

{ 51,1 , 32},
{51,2 , 43},
{ 52, 1,4 },
{ 52,2 ,3 },
{ 53,1 , 43},
{54 ,1 ,2 },
{ 55, 1,765 },
{ 56, 1, 78},
{ 57, 1, 5},
{58 , 2,43 },
{ 59,2 , 32},
{ 60,2 , 112},
{ 61,1 , 32},
{ 61,2 , 43},
{ 62, 1,4 },
{ 62,2 ,3 },
{ 63,1 , 43},
{64 ,1 ,2 },
{ 65, 1,765 },
{ 66, 1, 78},
{ 67, 1, 5},
{68 , 2,43 },
{ 69,2 , 32},
{ 70,2 , 112},
{ 71, 3, 415},
{ 71, 4,245 },
{ 72,3 ,2345 },
{ 73,4 ,432 },
{ 74,4 ,432 },
{ 75,1 , 234},
{ 76,1 ,1234 },
{ 77,2 ,3 },
{78 ,1 ,24 },
{ 79, 1,43 },
{ 80,2 , 43},
{ 81, 3, 24},
{81, 4, 53},
{ 82,3 , 2},
{ 83,4 , 52},
{ 84,4 ,24 },
{ 85,1 , 2},
{ 86,1 , 65},
{ 87,2 , 76},
{88 ,1 ,87 },
{ 89, 1, 87},
{ 90,2 , 7},
{ 91,2 , 7},
{ 92,2 , 7},
{ 93,2 , 7},
{ 94,2 , 7},
{ 95,2 , 7},
{ 96,2 , 7},
{ 97,2 , 7},
{ 98,2 , 7},
{ 99,2 , 7},
{100, 2, 1},
{ 101,2 , 7},
{ 102,2 , 7},
{ 103,2 , 7},
{ 104,2 , 7},
{105, 2, 1}], ML.Types.NumericField);



output(indepDataC, named ('indepDataC'), ALL);

labeldata_Format := RECORD
  UNSIGNED id;
  INTEGER label;
END;

label_table := DATASET ([
{	1	,	1	}	,
{	2	,	2	}	,
{	3	,	1	}	,
{	4	,	2	}	], labeldata_Format);
OUTPUT  (label_table, ALL, NAMED ('label_table'));



ML.ToField(label_table, depDataC);
OUTPUT  (depDataC, ALL, NAMED ('depDataC'));
label := PROJECT(depDataC,Types.DiscreteField);
OUTPUT  (label, ALL, NAMED ('label'));

//initialize THETA
Numclass := MAX (label, label.value);
OUTPUT  (Numclass, ALL, NAMED ('Numclass'));
InputSize := 105;

T1 := DATASET ([
{	1	,	1	,	0.930852	},
{	2	,	1	,	0.735919	},
{	1	,	2	,	0.509692	},
{	2	,	2	,	0.831635	},
{	1	,	101	,	0.291855	},
{	2	,	101	,	0.012353	},
{	1	,	102	,	0.042371	},
{	2	,	102	,	0.907751	},
{	1	,	3	,	0.831065	},
{	2	,	3	,	0.106051	},
{	1	,	4	,	0.513725	},
{	2	,	4	,	0.62333	},
{	1	,	103	,	0.169778	},
{	2	,	103	,	0.216183	},
{	1	,	104	,	0.786937	},
{	2	,	104	,	0.444646	},
{	1	,	5	,	0.170991	},
{	2	,	5	,	0.456662	},
{	1	,	6	,	0.510561	},
{	2	,	6	,	0.789603	},
{	1	,	105	,	0.811066	},
{	2	,	105	,	0.126155	},
{	1	,	106	,	0.521134	},
{	2	,	106	,	0.634367	},
{	1	,	7	,	0.394656	},
{	2	,	7	,	0.482839	},
{	1	,	8	,	0.190733	},
{	2	,	8	,	0.187356	},
{	1	,	107	,	0.51414	},
{	2	,	107	,	0.304725	},
{	1	,	108	,	0.27411	},
{	2	,	108	,	0.23183	},
{	1	,	9	,	0.951817	},
{	2	,	9	,	0.822106	},
{	1	,	10	,	0.523952	},
{	2	,	10	,	0.89579	},
{	1	,	109	,	0.265974	},
{	2	,	109	,	0.335554	},
{	1	,	110	,	0.863993	},
{	2	,	110	,	0.020279	},
{	1	,	11	,	0.755471	},
{	2	,	11	,	0.341248	},
{	1	,	12	,	0.794543	},
{	2	,	12	,	0.518606	},
{	1	,	111	,	0.442318	},
{	2	,	111	,	0.473382	},
{	1	,	112	,	0.886308	},
{	2	,	112	,	0.059487	},
{	1	,	13	,	0.492641	},
{	2	,	13	,	0.787101	},
{	1	,	14	,	0.842799	},
{	2	,	14	,	0.077585	},
{	1	,	113	,	0.551223	},
{	2	,	113	,	0.945174	},
{	1	,	114	,	0.646251	},
{	2	,	114	,	0.194229	},
{	1	,	15	,	0.688016	},
{	2	,	15	,	0.020989	},
{	1	,	16	,	0.863819	},
{	2	,	16	,	0.114836	},
{	1	,	115	,	0.667876	},
{	2	,	115	,	0.030945	},
{	1	,	116	,	0.115566	},
{	2	,	116	,	0.148393	},
{	1	,	17	,	0.802157	},
{	2	,	17	,	0.253265	},
{	1	,	18	,	0.75252	},
{	2	,	18	,	0.438077	},
{	1	,	117	,	0.306548	},
{	2	,	117	,	0.230225	},
{	1	,	118	,	0.116727	},
{	2	,	118	,	0.368384	},
{	1	,	19	,	0.315208	},
{	2	,	19	,	0.473144	},
{	1	,	20	,	0.779699	},
{	2	,	20	,	0.622183	},
{	1	,	119	,	0.437245	},
{	2	,	119	,	0.530768	},
{	1	,	120	,	0.007985	},
{	2	,	120	,	0.169861	},
{	1	,	21	,	0.361744	},
{	2	,	21	,	0.956188	},
{	1	,	22	,	0.391571	},
{	2	,	22	,	0.837042	},
{	1	,	121	,	0.207603	},
{	2	,	121	,	0.071535	},
{	1	,	122	,	0.530788	},
{	2	,	122	,	0.389383	},
{	1	,	23	,	0.146625	},
{	2	,	23	,	0.248129	},
{	1	,	24	,	0.853196	},
{	2	,	24	,	0.561968	},
{	1	,	123	,	0.172637	},
{	2	,	123	,	0.592173	},
{	1	,	124	,	0.706738	},
{	2	,	124	,	0.42157	},
{	1	,	25	,	0.607026	},
{	2	,	25	,	0.826167	},
{	1	,	26	,	0.030116	},
{	2	,	26	,	0.088982	},
{	1	,	125	,	0.878734	},
{	2	,	125	,	0.743118	},
{	1	,	126	,	0.531794	},
{	2	,	126	,	0.127014	},
{	1	,	27	,	0.16873	},
{	2	,	27	,	0.438376	},
{	1	,	28	,	0.924083	},
{	2	,	28	,	0.263644	},
{	1	,	127	,	0.167908	},
{	2	,	127	,	0.597551	},
{	1	,	128	,	0.46804	},
{	2	,	128	,	0.107065	},
{	1	,	29	,	0.213867	},
{	2	,	29	,	0.959803	},
{	1	,	30	,	0.568584	},
{	2	,	30	,	0.556251	},
{	1	,	129	,	0.547479	},
{	2	,	129	,	0.121596	},
{	1	,	130	,	0.337337	},
{	2	,	130	,	0.347382	},
{	1	,	31	,	0.297474	},
{	2	,	31	,	0.705206	},
{	1	,	32	,	0.150407	},
{	2	,	32	,	0.531918	},
{	1	,	131	,	0.484727	},
{	2	,	131	,	0.402214	},
{	1	,	132	,	0.371756	},
{	2	,	132	,	0.592458	},
{	1	,	33	,	0.075988	},
{	2	,	33	,	0.357472	},
{	1	,	34	,	0.365273	},
{	2	,	34	,	0.463622	},
{	1	,	133	,	0.49537	},
{	2	,	133	,	0.445855	},
{	1	,	134	,	0.020605	},
{	2	,	134	,	0.462439	},
{	1	,	35	,	0.726502	},
{	2	,	35	,	0.005906	},
{	1	,	36	,	0.694347	},
{	2	,	36	,	0.197384	},
{	1	,	135	,	0.462044	},
{	2	,	135	,	0.876695	},
{	1	,	136	,	0.090217	},
{	2	,	136	,	0.868908	},
{	1	,	37	,	0.33952	},
{	2	,	37	,	0.690609	},
{	1	,	38	,	0.83237	},
{	2	,	38	,	0.516927	},
{	1	,	137	,	0.785981	},
{	2	,	137	,	0.190639	},
{	1	,	138	,	0.974258	},
{	2	,	138	,	0.487009	},
{	1	,	39	,	0.089709	},
{	2	,	39	,	0.922709	},
{	1	,	40	,	0.192997	},
{	2	,	40	,	0.446033	},
{	1	,	139	,	0.803719	},
{	2	,	139	,	0.646778	},
{	1	,	140	,	0.669402	},
{	2	,	140	,	0.533438	},
{	1	,	41	,	0.922487	},
{	2	,	41	,	0.102254	},
{	1	,	42	,	0.749247	},
{	2	,	42	,	0.051993	},
{	1	,	141	,	0.330477	},
{	2	,	141	,	0.182665	},
{	1	,	142	,	0.411426	},
{	2	,	142	,	0.114321	},
{	1	,	43	,	0.52759	},
{	2	,	43	,	0.380773	},
{	1	,	44	,	0.207792	},
{	2	,	44	,	0.959513	},
{	1	,	143	,	0.746315	},
{	2	,	143	,	0.314012	},
{	1	,	144	,	0.266087	},
{	2	,	144	,	0.865484	},
{	1	,	45	,	0.616377	},
{	2	,	45	,	0.928759	},
{	1	,	46	,	0.947762	},
{	2	,	46	,	0.865586	},
{	1	,	145	,	0.951462	},
{	2	,	145	,	0.625638	},
{	1	,	146	,	0.471823	},
{	2	,	146	,	0.236428	},
{	1	,	47	,	0.534741	},
{	2	,	47	,	0.98314	},
{	1	,	48	,	0.46239	},
{	2	,	48	,	0.05219	},
{	1	,	147	,	0.07311	},
{	2	,	147	,	0.039573	},
{	1	,	148	,	0.75551	},
{	2	,	148	,	0.881637	},
{	1	,	49	,	0.946397	},
{	2	,	49	,	0.422437	},
{	1	,	50	,	0.627042	},
{	2	,	50	,	0.455862	},
{	1	,	149	,	0.924401	},
{	2	,	149	,	0.873811	},
{	1	,	150	,	0.991282	},
{	2	,	150	,	0.395961	},
{	1	,	51	,	0.076586	},
{	2	,	51	,	0.552592	},
{	1	,	52	,	0.359879	},
{	2	,	52	,	0.822925	},
{	1	,	151	,	0.301186	},
{	2	,	151	,	0.298638	},
{	1	,	152	,	0.085431	},
{	2	,	152	,	0.406041	},
{	1	,	53	,	0.391298	},
{	2	,	53	,	0.551437	},
{	1	,	54	,	0.590694	},
{	2	,	54	,	0.005265	},
{	1	,	153	,	0.360674	},
{	2	,	153	,	0.628781	},
{	1	,	55	,	0.016858	},
{	2	,	55	,	0.334351	},
{	1	,	56	,	0.521399	},
{	2	,	56	,	0.548435	},
{	1	,	57	,	0.780038	},
{	2	,	57	,	0.957198	},
{	1	,	58	,	0.445827	},
{	2	,	58	,	0.34284	},
{	1	,	59	,	0.992217	},
{	2	,	59	,	0.712991	},
{	1	,	60	,	0.327473	},
{	2	,	60	,	0.529094	},
{	1	,	61	,	0.474128	},
{	2	,	61	,	0.81142	},
{	1	,	62	,	0.136845	},
{	2	,	62	,	0.097245	},
{	1	,	63	,	0.087578	},
{	2	,	63	,	0.412776	},
{	1	,	64	,	0.073481	},
{	2	,	64	,	0.176418	},
{	1	,	65	,	0.616272	},
{	2	,	65	,	0.171145	},
{	1	,	66	,	0.779507	},
{	2	,	66	,	0.157201	},
{	1	,	67	,	0.584711	},
{	2	,	67	,	0.524229	},
{	1	,	68	,	0.04294	},
{	2	,	68	,	0.045616	},
{	1	,	69	,	0.844728	},
{	2	,	69	,	0.158635	},
{	1	,	70	,	0.041502	},
{	2	,	70	,	0.7409	},
{	1	,	71	,	0.851254	},
{	2	,	71	,	0.202411	},
{	1	,	72	,	0.747982	},
{	2	,	72	,	0.257984	},
{	1	,	73	,	0.5092	},
{	2	,	73	,	0.837772	},
{	1	,	74	,	0.995909	},
{	2	,	74	,	0.566513	},
{	1	,	75	,	0.036834	},
{	2	,	75	,	0.143371	},
{	1	,	76	,	0.898083	},
{	2	,	76	,	0.775984	},
{	1	,	77	,	0.676098	},
{	2	,	77	,	0.972787	},
{	1	,	78	,	0.677668	},
{	2	,	78	,	0.69954	},
{	1	,	79	,	0.158247	},
{	2	,	79	,	0.259391	},
{	1	,	80	,	0.205537	},
{	2	,	80	,	0.718503	},
{	1	,	81	,	0.44542	},
{	2	,	81	,	0.287967	},
{	1	,	82	,	0.783566	},
{	2	,	82	,	0.279098	},
{	1	,	83	,	0.657828	},
{	2	,	83	,	0.604512	},
{	1	,	84	,	0.137458	},
{	2	,	84	,	0.677529	},
{	1	,	85	,	0.964744	},
{	2	,	85	,	0.617636	},
{	1	,	86	,	0.946353	},
{	2	,	86	,	0.617217	},
{	1	,	87	,	0.192034	},
{	2	,	87	,	0.405393	},
{	1	,	88	,	0.336116	},
{	2	,	88	,	0.081343	},
{	1	,	89	,	0.657949	},
{	2	,	89	,	0.15118	},
{	1	,	90	,	0.608359	},
{	2	,	90	,	0.96961	},
{	1	,	91	,	0.567551	},
{	2	,	91	,	0.639131	},
{	1	,	92	,	0.101297	},
{	2	,	92	,	0.434055	},
{	1	,	93	,	0.020685	},
{	2	,	93	,	0.20798	},
{	1	,	94	,	0.396544	},
{	2	,	94	,	0.226298	},
{	1	,	95	,	0.698267	},
{	2	,	95	,	0.877294	},
{	1	,	96	,	0.319304	},
{	2	,	96	,	0.061282	},
{	1	,	97	,	0.214741	},
{	2	,	97	,	0.049493	},
{	1	,	98	,	0.636832	},
{	2	,	98	,	0.437917	},
{	1	,	99	,	0.169824	},
{	2	,	99	,	0.369996	},
{	1	,	100	,	0.781189	},
{	2	,	100	,	0.3602	}

], Mat.Types.Element);
OUTPUT  (T1, ALL, NAMED ('T1'));
T11 := T1 (y <= 105);
IntTHETA := Mat.Scale (T11,0.005);
OUTPUT  (IntTHETA, ALL, NAMED ('IntTHETA'));
//SoftMax_Sparse Classfier

//Set Parameters
LoopNum := 20; // Number of iterations in softmax algortihm
LAMBDA := 0.0001; // weight decay parameter in  claculation of SoftMax Cost fucntion

UNSIGNED4 prows:=0;
 UNSIGNED4 pcols:=0;

 UNSIGNED corr := 3;

trainer := DeepLearning.softmax_lbfgs_partitions_datadist (InputSize, Numclass, 2,  2); 
indepDataC_R := PROJECT (indepDataC,TRANSFORM ( ML.Types.NumericField, SELF.id := LEFT.number; SELF.number := LEFT.id; SELF:=LEFT),LOCAL);
softresult := trainer.LearnC (indepDataC_R, depDataC,IntTHETA, LAMBDA, LoopNum, corr);

OUTPUT (softresult, named('softresult'), ALL);

thsirec := RECORD (Layout_Part)
UNSIGNED real_node;
END;

OUTPUT (PROJECT(softresult, TRANSFORM (thsirec,  SELF.real_node := STD.System.Thorlib.Node(); SELF := LEFT), LOCAL), ALL);

/*
SAmod := trainer.model(softresult);

OUTPUT(SAmod, named('SAmod'));

prob := trainer.ClassProbDistribC(indepDataC,softresult);

OUTPUT(prob, named('prob'), ALL);

classprob := trainer.ClassifyC(indepDataC,softresult);

OUTPUT(classprob, named('classprob'), ALL);
*/